/* commenting out previous test example and may toggle need based on user input 
// these are the basic bot functions of turning left, turning right, go fwd, and clear program
// using Arduino Uno R3 and eventually an iOS/Android app with a Bluetooth LE shield/module for serial communication

// setting up constants
const int switchPin = 2; // push button hooked up to digital io pin 2 - to be driven as an input
const int motorPin = 9; // mosfet gate hooked up to digital io pin 9 - to be driven as an output
int switchState = 0; // to hold the value of the switch

// declaring outputs and inputs
void setup() {
  pinMode(motorPin, OUTPUT); 
  pinMode(switchPin, INPUT);
}  

// creating a loop to read the button and drive the motor accordingly

void loop() {
  switchState = digitalRead(switchPin); // reading the state of the push button via the switchPin
  
  if (switchState == HIGH) {
    digitalWrite(motorPin, HIGH);
    delay(5000); // runs motor for 5 seconds
  }
  else {
    digitalWrite(motorPin, LOW);
  }
}
*/    

// naming constants
const int controlPin1 = 2;
const int controlPin2 = 3;
const int enablePin = 9;
const int directionSwitchPin = 4;
const int onOffSwitchStateSwitchPin = 5;
const int potPin = A0;

// creating variables for remembering program state
int onOffSwitchState = 0; // holds value for main on/off switch
int previousOnOffSwitchState = 0; // holds previous value for main on/off switch
int directionSwitchState = 0; // holds value for the switch that controls direction 
int previousDirectionSwitchState = 0; // holds previous value for the switch that controls direction


// creating variables for motor control
int motorEnabled = 0; // this variable keeps track whether or not the motor is spinning
int motorSpeed = 0;
int motorDirection = 1; // this variable keeps track of the direction 

// declaring the digital pins as inputs or outputs
void setup(){
  pinMode(onOffSwitchStateSwitchPin, INPUT);
  pinMode(directionSwitchPin, INPUT);
  pinMode(controlPin1, OUTPUT);
  pinMode(controlPin2, OUTPUT);
  pinMode(enablePin, OUTPUT);
    
  // turn the motor off during the start
  digitalWrite(enablePin, LOW);
}

// reading the sensor information
void loop(){
  onOffSwitchState = digitalRead(onOffSwitchStatePin);
  delay(1);
  directionSwitchState = digitalRead(directionSwitchPin);
  motorSpeed = analogRead(potPin)/4;
  
  // check if on/off sensor has changed
	if(onOffSwitchState != previousOnOffSwitchState){
		//not sure if i need the if statement below or if i can just go into switching of motor power 
		if(onOffSwitchState == HIGH){
			motorEnabled = !motorEnabled;
		}
	}

	// check to see if the direction has changed
	if(directionSwitchState != previousDirectionSwitchState){
		//not sure if i need the if statement below or if i can just go ahead and switch polarity of motor direction
		if(directionSwitchState == HIGH){
			motorDirection = !motorDirection;
		}
	}

	// change pins to change motor in proper direction
	if(motorDirection == 1){
		digitalWrite(controlPin1, HIGH);
		digitalWrite(controlPin2, LOW);
	}
	else{
		digitalWrite(controlPin1, LOW);
		digitalWrite(controlPin2, HIGH);
	}

	// pwm the motor if it is enabled
	if(motorEnabled == 1){
		analogWrite(enablePin, motorSpeed);
	}
	else{
		analogWrite(enablePin, 0)
	}

	// save the current states for the next loop()
	previousDirectionSwitchState = directionSwitchState;
	previousOnOffSwitchState = onOffSwitchState;
} 
